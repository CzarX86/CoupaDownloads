#!/usr/bin/env python3
"""
Sistema de Invent√°rio de Downloads - Vers√£o Corrigida
Usa o sistema refatorado com gest√£o de abas melhorada
"""

import os
import sys
import time
import threading
import pandas as pd
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from selenium import webdriver
from selenium.webdriver.edge.options import Options
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, InvalidSessionIdException, NoSuchWindowException
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich.panel import Panel
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.layout import Layout
from rich import box

# Importar sistema refatorado
from config import config_manager
from download_services import InventoryService, ExcelReaderService
from browser_tab_manager import FIFOTabManager
from ui_component_interfaces import DownloadInfo

# üõ°Ô∏è IMPORTAR CONFIGURA√á√ÉO CR√çTICA DO PERFIL üõ°Ô∏è
try:
    from profile_config import EDGE_PROFILE_CONFIG, PROFILE_STATUS_MESSAGES
    print("‚úÖ Configura√ß√£o cr√≠tica do perfil carregada com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel carregar configura√ß√£o do perfil: {e}")
    print("   Usando configura√ß√µes padr√£o...")
    # Configura√ß√µes de fallback
    EDGE_PROFILE_CONFIG = {
        "macos_profile_path": "~/Library/Application Support/Microsoft Edge",
        "windows_profile_path": "%LOCALAPPDATA%/Microsoft/Edge/User Data",
        "profile_directory": "Default",
        "login_check_url": "https://unilever.coupahost.com",
        "login_check_timeout": 3,
        "login_selectors": [
            "input[type='password']",
            "input[name*='password']", 
            "button[type='submit']"
        ]
    }
    PROFILE_STATUS_MESSAGES = {
        "not_logged_in": "‚ö†Ô∏è Perfil carregado mas usu√°rio n√£o est√° logado no Coupa\n   Ser√° necess√°rio fazer login manualmente se necess√°rio",
        "logged_in": "‚úÖ Perfil carregado e usu√°rio est√° logado no Coupa!",
        "check_failed": "‚ö†Ô∏è N√£o foi poss√≠vel verificar status do login: {error}\n   Continuando com o processamento..."
    }


def setup_edge_driver(headless=False):
    """Configura o driver do Edge com perfil."""
    try:
        print("üîß Configurando driver Edge...")
        
        # Configurar op√ß√µes do Edge
        options = Options()
        
        if headless:
            options.add_argument("--headless")
            print("   Modo headless ativado")
        
        # Configura√ß√µes do perfil Edge
        profile_path = os.path.expanduser(EDGE_PROFILE_CONFIG["macos_profile_path"])
        options.add_argument(f"--user-data-dir={profile_path}")
        options.add_argument(f"--profile-directory={EDGE_PROFILE_CONFIG['profile_directory']}")
        
        # Configura√ß√µes de download
        download_dir = os.path.expanduser("~/Downloads/CoupaDownloads")
        os.makedirs(download_dir, exist_ok=True)
        options.add_argument(f"--download-directory={download_dir}")
        
        # Outras configura√ß√µes
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-running-insecure-content")
        
        # Configura√ß√µes de download
        prefs = {
            "download.default_directory": download_dir,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": False,
        }
        options.add_experimental_option("prefs", prefs)
        
        # Criar driver
        driver = webdriver.Edge(options=options)
        driver.implicitly_wait(10)
        
        print("‚úÖ Driver Edge configurado com sucesso")
        return driver
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar driver Edge: {e}")
        return None


def verify_edge_profile_login_status(driver):
    """
    üõ°Ô∏è FUN√á√ÉO CR√çTICA - N√ÉO ALTERAR SEM AUTORIZA√á√ÉO EXPL√çCITA DO USU√ÅRIO üõ°Ô∏è
    
    Esta fun√ß√£o verifica se o perfil do Edge foi carregado corretamente
    e se o usu√°rio est√° logado no Coupa. √â ESSENCIAL para o funcionamento.
    
    ‚ö†Ô∏è  ATEN√á√ÉO: Qualquer altera√ß√£o nesta fun√ß√£o pode quebrar a detec√ß√£o de perfil
    ‚ö†Ô∏è  Se voc√™ precisa modificar algo aqui, CONSULTE O USU√ÅRIO PRIMEIRO
    """
    try:
        print("üîç Verificando status do perfil Edge...")
        
        # Tentar acessar uma p√°gina que requer login para verificar se o perfil est√° funcionando
        driver.get(EDGE_PROFILE_CONFIG["login_check_url"])
        time.sleep(EDGE_PROFILE_CONFIG["login_check_timeout"])  # Aguardar carregamento
        
        # Verificar se h√° elementos de login (indicando que n√£o estamos logados)
        login_elements = []
        for selector in EDGE_PROFILE_CONFIG["login_selectors"]:
            login_elements.extend(driver.find_elements("css selector", selector))
        
        if login_elements:
            print(PROFILE_STATUS_MESSAGES["not_logged_in"])
            return False
        else:
            print(PROFILE_STATUS_MESSAGES["logged_in"])
            return True
            
    except Exception as e:
        print(PROFILE_STATUS_MESSAGES["check_failed"].format(error=e))
        return False


def interactive_configuration():
    """Configura√ß√£o interativa do sistema."""
    console = Console()
    
    console.print(Panel.fit(
        "[bold blue]CONFIGURA√á√ÉO INTERATIVA - SISTEMA DE INVENT√ÅRIO[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Modo headless
        console.print("\n[bold]üîç MODO HEADLESS:[/bold]")
        console.print("1 - Sim (sem interface gr√°fica)")
        console.print("2 - N√£o (com interface gr√°fica)")
        headless_choice = input("Escolha (1-2): ").strip()
        headless = headless_choice == "1"
        
        # N√∫mero de janelas
        console.print("\n[bold]ü™ü N√öMERO DE JANELAS:[/bold]")
        console.print("1 - 1 janela")
        console.print("2 - 2 janelas")
        console.print("3 - 3 janelas")
        console.print("4 - 4 janelas")
        windows_choice = input("Escolha (1-4): ").strip()
        num_windows = int(windows_choice)
        
        # Abas por janela
        console.print("\n[bold]üìÑ ABAS POR JANELA:[/bold]")
        console.print("1 - 1 aba")
        console.print("2 - 2 abas")
        console.print("3 - 3 abas")
        console.print("4 - 4 abas")
        tabs_choice = input("Escolha (1-4): ").strip()
        max_tabs_per_window = int(tabs_choice)
        
        # Workers
        console.print("\n[bold]‚ö° WORKERS PARALELOS:[/bold]")
        console.print("1 - 2 workers")
        console.print("2 - 4 workers")
        console.print("3 - 6 workers")
        console.print("4 - 8 workers")
        workers_choice = input("Escolha (1-4): ").strip()
        max_workers = int(workers_choice) * 2
        
        # Timeout
        console.print("\n[bold]‚è±Ô∏è TIMEOUT (segundos):[/bold]")
        console.print("1 - 10 segundos")
        console.print("2 - 15 segundos")
        console.print("3 - 20 segundos")
        timeout_choice = input("Escolha (1-3): ").strip()
        timeout = int(timeout_choice) * 5 + 5
        
        config = {
            'headless': headless,
            'num_windows': num_windows,
            'max_tabs_per_window': max_tabs_per_window,
            'max_workers': max_workers,
            'timeout': timeout
        }
        
        console.print(f"\n[bold green]‚úÖ Configura√ß√£o salva:[/bold green]")
        console.print(f"   Modo headless: {'Sim' if headless else 'N√£o'}")
        console.print(f"   Janelas: {num_windows}")
        console.print(f"   Abas por janela: {max_tabs_per_window}")
        console.print(f"   Workers: {max_workers}")
        console.print(f"   Timeout: {timeout}s")
        
        return config
        
    except KeyboardInterrupt:
        console.print("\n[yellow]üëã Configura√ß√£o cancelada pelo usu√°rio[/yellow]")
        return None
    except Exception as e:
        console.print(f"\n[red]‚ùå Erro na configura√ß√£o: {e}[/red]")
        return None


def manage_inventory_system(config):
    """Gerencia o sistema de invent√°rio usando o sistema refatorado."""
    console = Console()
    
    try:
        # Configurar driver
        driver = setup_edge_driver(config['headless'])
        if not driver:
            console.print("[red]‚ùå Falha ao configurar driver Edge[/red]")
            return
        
        # Verificar perfil
        if not verify_edge_profile_login_status(driver):
            console.print("[yellow]‚ö†Ô∏è Continuando mesmo com perfil n√£o verificado...[/yellow]")
        
        # Criar janelas
        window_ids = [driver.current_window_handle]
        for i in range(config['num_windows'] - 1):
            driver.execute_script("window.open('');")
            window_ids.append(driver.window_handles[-1])
        
        console.print(f"[green]‚úÖ {len(window_ids)} janelas criadas[/green]")
        
        # Criar gerenciador de abas usando sistema refatorado
        tab_manager = FIFOTabManager(driver, window_ids, config['max_tabs_per_window'])
        
        # Ler URLs do Excel
        excel_service = ExcelReaderService()
        po_numbers = excel_service.read_po_numbers()
        
        if po_numbers:
            coupa_urls = excel_service.build_coupa_urls(po_numbers)
            console.print(f"[blue]üìä {len(coupa_urls)} URLs para processar[/blue]")
            
            # Processar URLs em paralelo
            processed_urls = 0
            total_attachments = 0
            
            with ThreadPoolExecutor(max_workers=config['max_workers']) as executor:
                # Submeter todas as tarefas
                future_to_url = {
                    executor.submit(tab_manager.process_url_with_inventory, i, url, config['max_workers']): (i, url)
                    for i, url in enumerate(coupa_urls)
                }
                
                # Processar resultados
                for future in as_completed(future_to_url):
                    i, url = future_to_url[future]
                    try:
                        result = future.result()
                        
                        if result['success']:
                            processed_urls += 1
                            total_attachments += result['attachments_found']
                            po_number = url.split('/')[-1]
                            console.print(f"[green]‚úÖ [{result['thread_name']}] PO {po_number}: {result['attachments_found']} anexos inventariados[/green]")
                        else:
                            console.print(f"[red]‚ùå [{result['thread_name']}] Erro em URL {i+1}: {result['error']}[/red]")
                        
                        # Mostrar progresso
                        progress = (processed_urls / len(coupa_urls)) * 100
                        console.print(f"[blue]üìä Progresso: {processed_urls}/{len(coupa_urls)} ({progress:.1f}%)[/blue]")
                        
                    except Exception as e:
                        console.print(f"[red]‚ùå Exce√ß√£o para URL {i+1}: {e}[/red]")
            
            # Resumo final
            console.print(f"\n[bold green]üéâ Sistema de invent√°rio conclu√≠do![/bold green]")
            console.print(f"[blue]üìä URLs processadas: {processed_urls}/{len(coupa_urls)}[/blue]")
            console.print(f"[blue]üìé Total de anexos inventariados: {total_attachments}[/blue]")
            console.print(f"[blue]üìÑ Arquivo CSV criado: download_inventory.csv[/blue]")
            console.print(f"\n[yellow]üí° Pr√≥ximo passo: Execute o microservi√ßo de download para baixar os arquivos![/yellow]")
            
        else:
            console.print("[yellow]‚ö†Ô∏è Nenhuma URL encontrada no Excel.[/yellow]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Erro no sistema de invent√°rio: {e}[/red]")
        
    finally:
        if driver:
            try:
                driver.quit()
                console.print("[green]üîí WebDriver fechado com sucesso![/green]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è Erro ao fechar WebDriver: {e}[/yellow]")


if __name__ == "__main__":
    console = Console()
    console.print("[bold blue]üöÄ Iniciando Sistema de Invent√°rio de Downloads...[/bold blue]")
    
    # Configura√ß√£o interativa
    config = interactive_configuration()
    if config is None:
        console.print("[yellow]üëã Programa finalizado![/yellow]")
        sys.exit(0)
    
    # Executar sistema de invent√°rio
    manage_inventory_system(config)
    console.print("[yellow]üëã Programa finalizado![/yellow]")

