"""
BACKUP - Sistema de Invent√°rio de Downloads - Vers√£o Original
Este arquivo mant√©m a vers√£o original antes da corre√ß√£o de distribui√ß√£o de janelas

Data: $(date)
Problema: get_available_window() sempre retorna primeira janela dispon√≠vel
Solu√ß√£o: Usar distribui√ß√£o determin√≠stica com m√≥dulo (%)

PROBLEMA IDENTIFICADO:
- Linha 347: window_id = self.get_available_window()
- Linha 175-181: get_available_window() busca sequencialmente
- Resultado: Todas as threads v√£o para a primeira janela dispon√≠vel
- Race condition com processamento paralelo

CORRE√á√ÉO APLICADA:
- Trocar get_available_window() por distribui√ß√£o determin√≠stica
- window_index = url_index % len(self.window_ids)
- Garante distribui√ß√£o uniforme mesmo com processamento paralelo
"""

import os
import sys
import time
import threading
import pandas as pd
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, InvalidSessionIdException, NoSuchWindowException
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich.panel import Panel
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.layout import Layout
from rich import box

# üõ°Ô∏è IMPORTAR CONFIGURA√á√ÉO CR√çTICA DO PERFIL üõ°Ô∏è
try:
    from profile_config import EDGE_PROFILE_CONFIG, PROFILE_STATUS_MESSAGES
    print("‚úÖ Configura√ß√£o cr√≠tica do perfil carregada com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel carregar configura√ß√£o do perfil: {e}")
    print("   Usando configura√ß√µes padr√£o...")
    # Configura√ß√µes de fallback
    EDGE_PROFILE_CONFIG = {
        "macos_profile_path": "~/Library/Application Support/Microsoft Edge",
        "windows_profile_path": "%LOCALAPPDATA%/Microsoft/Edge/User Data",
        "profile_directory": "Default",
        "login_check_url": "https://unilever.coupahost.com",
        "login_check_timeout": 3,
        "login_selectors": [
            "input[type='password']",
            "input[name*='password']", 
            "button[type='submit']"
        ]
    }
    PROFILE_STATUS_MESSAGES = {
        "not_logged_in": "‚ö†Ô∏è Perfil carregado mas usu√°rio n√£o est√° logado no Coupa\n   Ser√° necess√°rio fazer login manualmente se necess√°rio",
        "logged_in": "‚úÖ Perfil carregado e usu√°rio est√° logado no Coupa!",
        "check_failed": "‚ö†Ô∏è N√£o foi poss√≠vel verificar status do login: {error}\n   Continuando com o processamento..."
    }


class DownloadInventoryManager:
    """Gerencia o invent√°rio de downloads - coleta URLs sem baixar."""
    
    def __init__(self, csv_path="download_inventory.csv"):
        self.csv_path = csv_path
        self.lock = threading.Lock()
        self.attachment_selector = (
            "div[class*='commentAttachments'] a[href*='attachment_file'], "
            "div[class*='attachment'] a[href*='attachment_file'], "
            "div[class*='attachment'] a[href*='download'], "
            "div[class*='attachment'] a[href*='attachment'], "
            "span[aria-label*='file attachment'], "
            "span[role='button'][aria-label*='file attachment'], "
            "span[title*='.pdf'], span[title*='.docx'], span[title*='.msg']"
        )
        
        # Inicializar CSV se n√£o existir
        self._initialize_csv()
    
    def _initialize_csv(self):
        """Inicializa o arquivo CSV de controle."""
        if not os.path.exists(self.csv_path):
            df = pd.DataFrame(columns=[
                'po_number', 'url', 'filename', 'file_type', 'status', 
                'created_at', 'downloaded_at', 'error_message', 'window_id', 'tab_id'
            ])
            df.to_csv(self.csv_path, index=False)
            print(f"‚úÖ CSV de controle criado: {self.csv_path}")
    
    def add_download_url(self, po_number, url, filename, file_type="unknown", window_id="", tab_id=""):
        """Adiciona uma URL de download ao invent√°rio."""
        with self.lock:
            try:
                # Ler CSV existente
                df = pd.read_csv(self.csv_path)
                
                # Adicionar nova linha
                new_row = {
                    'po_number': po_number,
                    'url': url,
                    'filename': filename,
                    'file_type': file_type,
                    'status': 'pending',
                    'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'downloaded_at': '',
                    'error_message': '',
                    'window_id': window_id,
                    'tab_id': tab_id
                }
                
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                df.to_csv(self.csv_path, index=False)
                
                print(f"üìù URL adicionada ao invent√°rio: {filename}")
                return True
                
            except Exception as e:
                print(f"‚ùå Erro ao adicionar URL ao invent√°rio: {e}")
                return False
    
    def get_pending_downloads(self):
        """Retorna lista de downloads pendentes."""
        try:
            df = pd.read_csv(self.csv_path)
            return df[df['status'] == 'pending'].to_dict('records')
        except Exception as e:
            print(f"‚ùå Erro ao ler downloads pendentes: {e}")
            return []
    
    def update_download_status(self, po_number, filename, status, error_message=""):
        """Atualiza o status de um download."""
        with self.lock:
            try:
                df = pd.read_csv(self.csv_path)
                
                # Encontrar e atualizar linha
                mask = (df['po_number'] == po_number) & (df['filename'] == filename)
                if mask.any():
                    df.loc[mask, 'status'] = status
                    if error_message:
                        df.loc[mask, 'error_message'] = error_message
                    if status == 'completed':
                        df.loc[mask, 'downloaded_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        # Garantir que a coluna seja string
                        df['downloaded_at'] = df['downloaded_at'].astype(str)
                    
                    df.to_csv(self.csv_path, index=False)
                    return True
                return False
                
            except Exception as e:
                print(f"‚ùå Erro ao atualizar status: {e}")
                return False


class FIFOTabManager:
    """Gerencia abas com controle FIFO por janela."""
    
    def __init__(self, driver, window_ids, max_tabs_per_window=3):
        self.driver = driver
        self.window_ids = window_ids
        self.max_tabs_per_window = max_tabs_per_window
        self.lock = threading.Lock()
        
        # Controle FIFO por janela
        self.window_tab_queues = {window_id: [] for window_id in window_ids}
        self.active_tabs = {}  # url_index -> tab_info
        self.inventory_manager = DownloadInventoryManager()
        
        # Configura√ß√µes de download
        self.download_dir = os.path.expanduser("~/Downloads/CoupaDownloads")
        self.attachment_selector = (
            "div[class*='commentAttachments'] a[href*='attachment_file'], "
            "div[class*='attachment'] a[href*='attachment_file'], "
            "div[class*='attachment'] a[href*='download'], "
            "div[class*='attachment'] a[href*='attachment'], "
            "span[aria-label*='file attachment'], "
            "span[role='button'][aria-label*='file attachment'], "
            "span[title*='.pdf'], span[title*='.docx'], span[title*='.msg']"
        )
    
    def get_available_window(self):
        """Retorna uma janela dispon√≠vel (com menos abas que o m√°ximo)."""
        with self.lock:
            for window_id in self.window_ids:
                if len(self.window_tab_queues[window_id]) < self.max_tabs_per_window:
                    return window_id
            return None
    
    def create_tab_for_url(self, url_index, url, window_id, window_name):
        """Cria uma aba para uma URL espec√≠fica."""
        try:
            with self.lock:
                # Verificar se janela ainda tem espa√ßo
                if len(self.window_tab_queues[window_id]) >= self.max_tabs_per_window:
                    print(f"‚ö†Ô∏è Janela {window_name} est√° cheia ({self.max_tabs_per_window} abas)")
                    return None
                
                # Mudar para a janela especificada
                self.driver.switch_to.window(window_id)
                
                # Criar nova aba
                self.driver.execute_script("window.open('');")
                
                # Mudar para a nova aba criada
                self.driver.switch_to.window(self.driver.window_handles[-1])
                new_tab_id = self.driver.current_window_handle
            
            # Carregar URL fora do lock
            print(f"üìÑ [{threading.current_thread().name}] Criando aba para URL {url_index+1} em {window_name}")
            print(f"   Aba ID: {new_tab_id}")
            print(f"   URL: {url}")
            
            self.driver.get(url)
            
            # Aguardar carregamento
            wait = WebDriverWait(self.driver, 10)
            wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
            
            # Registrar aba ativa
            with self.lock:
                tab_info = {
                    'tab_id': new_tab_id,
                    'url': url,
                    'url_index': url_index,
                    'window_name': window_name,
                    'window_id': window_id,
                    'created_at': time.time()
                }
                
                self.active_tabs[url_index] = tab_info
                self.window_tab_queues[window_id].append(url_index)
            
            print(f"‚úÖ [{threading.current_thread().name}] URL {url_index+1} carregada com sucesso")
            return tab_info
                
        except Exception as e:
            print(f"‚ùå [{threading.current_thread().name}] Erro ao criar aba para URL {url_index+1}: {e}")
            return None
    
    def inventory_attachments_for_tab(self, tab_id, po_number):
        """Faz invent√°rio dos anexos de uma aba e salva URLs no CSV."""
        thread_name = threading.current_thread().name
        
        try:
            with self.lock:
                self.driver.switch_to.window(tab_id)
                
                # Aguardar elementos carregarem
                wait = WebDriverWait(self.driver, 10)
                wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
                
                # Buscar anexos
                attachments = self.driver.find_elements(By.CSS_SELECTOR, self.attachment_selector)
            
            if attachments:
                print(f"üîç [{thread_name}] Inventariando {len(attachments)} anexos para PO {po_number}")
                
                # Coletar informa√ß√µes dos anexos
                for i, attachment in enumerate(attachments):
                    try:
                        # Obter URL do anexo
                        download_url = attachment.get_attribute('href')
                        if not download_url:
                            # Tentar obter de outros atributos
                            download_url = attachment.get_attribute('data-href') or attachment.get_attribute('data-url')
                        
                        # Obter nome do arquivo
                        filename = attachment.get_attribute('title') or attachment.get_attribute('aria-label') or f"{po_number}_attachment_{i+1}"
                        
                        # Determinar tipo de arquivo
                        file_type = "unknown"
                        if filename.lower().endswith('.pdf'):
                            file_type = "pdf"
                        elif filename.lower().endswith(('.doc', '.docx')):
                            file_type = "document"
                        elif filename.lower().endswith(('.xls', '.xlsx')):
                            file_type = "spreadsheet"
                        elif filename.lower().endswith('.msg'):
                            file_type = "email"
                        
                        # Adicionar ao invent√°rio
                        if download_url:
                            self.inventory_manager.add_download_url(
                                po_number=po_number,
                                url=download_url,
                                filename=filename,
                                file_type=file_type,
                                window_id=tab_id,
                                tab_id=tab_id
                            )
                            print(f"üìù [{thread_name}] URL coletada: {filename}")
                        else:
                            print(f"‚ö†Ô∏è [{thread_name}] URL n√£o encontrada para: {filename}")
                            
                    except Exception as e:
                        print(f"‚ùå [{thread_name}] Erro ao processar anexo {i+1}: {e}")
                
                return len(attachments)
            else:
                print(f"üìÑ [{thread_name}] Nenhum anexo encontrado para PO {po_number}")
                return 0
                
        except Exception as e:
            print(f"‚ùå [{thread_name}] Erro ao fazer invent√°rio: {e}")
            return 0
    
    def close_tab_and_create_new(self, url_index, new_url, new_url_index):
        """Fecha uma aba e cria uma nova (FIFO)."""
        try:
            with self.lock:
                if url_index in self.active_tabs:
                    tab_info = self.active_tabs[url_index]
                    window_id = tab_info['window_id']
                    window_name = tab_info['window_name']
                    
                    # Fechar aba atual
                    if tab_info['tab_id'] in self.driver.window_handles:
                        self.driver.switch_to.window(tab_info['tab_id'])
                        self.driver.close()
                        print(f"üîí [{threading.current_thread().name}] Aba {url_index+1} fechada")
                    
                    # Remover da fila da janela
                    if url_index in self.window_tab_queues[window_id]:
                        self.window_tab_queues[window_id].remove(url_index)
                    
                    # Remover das abas ativas
                    del self.active_tabs[url_index]
                    
                    # Criar nova aba na mesma janela
                    new_tab_info = self.create_tab_for_url(new_url_index, new_url, window_id, window_name)
                    return new_tab_info
            
            return None
            
        except Exception as e:
            print(f"‚ùå [{threading.current_thread().name}] Erro ao fechar/criar aba: {e}")
            return None
    
    def process_url_with_inventory(self, url_index, url, max_workers):
        """Processa uma URL fazendo invent√°rio dos anexos."""
        thread_name = threading.current_thread().name
        result = {
            'url_index': url_index,
            'url': url,
            'success': False,
            'attachments_found': 0,
            'error': None,
            'thread_name': thread_name
        }
        
        try:
            # PROBLEMA: Obter janela dispon√≠vel (sempre primeira janela)
            window_id = self.get_available_window()
            if not window_id:
                result['error'] = "Nenhuma janela dispon√≠vel"
                return result
            
            window_name = f"Janela {self.window_ids.index(window_id) + 1}"
            
            # Criar aba para a URL
            tab_info = self.create_tab_for_url(url_index, url, window_id, window_name)
            
            if tab_info:
                # Extrair n√∫mero PO da URL
                po_number = url.split('/')[-1]
                
                # Aguardar carregamento
                time.sleep(0.5)
                
                # Fazer invent√°rio dos anexos
                attachments_count = self.inventory_attachments_for_tab(tab_info['tab_id'], po_number)
                
                result['attachments_found'] = attachments_count
                result['success'] = True
                
                # Fechar aba ap√≥s invent√°rio
                time.sleep(0.2)
                self.close_tab_and_create_new(url_index, "", -1)  # Apenas fechar
                
            else:
                result['error'] = "Falha ao criar aba"
                
        except Exception as e:
            result['error'] = str(e)
            print(f"‚ùå [{thread_name}] Erro ao processar URL {url_index+1}: {e}")
        
        return result
    
    def get_active_tab_count(self):
        """Retorna o n√∫mero de abas ativas."""
        with self.lock:
            return len(self.active_tabs)
    
    def get_window_tab_counts(self):
        """Retorna contagem de abas por janela."""
        with self.lock:
            return {window_id: len(tabs) for window_id, tabs in self.window_tab_queues.items()}


def verify_edge_profile_login_status(driver):
    """
    üõ°Ô∏è FUN√á√ÉO CR√çTICA - N√ÉO ALTERAR SEM AUTORIZA√á√ÉO EXPL√çCITA DO USU√ÅRIO üõ°Ô∏è
    
    Esta fun√ß√£o verifica se o perfil do Edge foi carregado corretamente
    e se o usu√°rio est√° logado no Coupa. √â ESSENCIAL para o funcionamento.
    
    ‚ö†Ô∏è  ATEN√á√ÉO: Qualquer altera√ß√£o nesta fun√ß√£o pode quebrar a detec√ß√£o de perfil
    ‚ö†Ô∏è  Se voc√™ precisa modificar algo aqui, CONSULTE O USU√ÅRIO PRIMEIRO
    
    Args:
        driver: Inst√¢ncia do WebDriver do Edge
        
    Returns:
        bool: True se perfil carregado e usu√°rio logado, False caso contr√°rio
    """
    try:
        # Tentar acessar uma p√°gina que requer login para verificar se o perfil est√° funcionando
        driver.get(EDGE_PROFILE_CONFIG["login_check_url"])
        time.sleep(EDGE_PROFILE_CONFIG["login_check_timeout"])  # Aguardar carregamento
        
        # Verificar se h√° elementos de login (indicando que n√£o estamos logados)
        login_elements = []
        for selector in EDGE_PROFILE_CONFIG["login_selectors"]:
            login_elements.extend(driver.find_elements(By.CSS_SELECTOR, selector))
        
        if login_elements:
            print(PROFILE_STATUS_MESSAGES["not_logged_in"])
            return False
        else:
            print(PROFILE_STATUS_MESSAGES["logged_in"])
            return True
            
    except Exception as e:
        print(PROFILE_STATUS_MESSAGES["check_failed"].format(error=e))
        return False


def read_po_numbers_from_excel(max_lines=None):
    """
    L√™ os n√∫meros de PO do arquivo Excel e constr√≥i URLs do Coupa.
    
    Args:
        max_lines (int, optional): N√∫mero m√°ximo de linhas para processar
    
    Returns:
        list: Lista de URLs do Coupa para carregar
    """
    try:
        # Caminho para o arquivo Excel
        excel_path = os.path.join(os.path.dirname(__file__), "input.xlsx")
        
        # Verificar se arquivo existe
        if not os.path.exists(excel_path):
            print(f"‚ùå Arquivo n√£o encontrado: {excel_path}")
            return []
        
        # Ler arquivo Excel
        df = pd.read_excel(excel_path, sheet_name='PO_Data', engine='openpyxl')
        
        # Extrair n√∫meros de PO da coluna 'PO_NUMBER'
        po_numbers = df['PO_NUMBER'].dropna().astype(str).tolist()
        
        # Aplicar limite de linhas se especificado
        if max_lines and max_lines > 0:
            po_numbers = po_numbers[:max_lines]
            print(f"üìä Processando apenas as primeiras {max_lines} linhas do Excel")
        
        # Construir URLs do Coupa
        base_url = "https://unilever.coupahost.com"
        coupa_urls = []
        
        for po_number in po_numbers:
            # Limpar n√∫mero de PO (remover prefixos como PO, PM, etc.)
            clean_po = po_number.replace("PO", "").replace("PM", "").strip()
            coupa_url = f"{base_url}/order_headers/{clean_po}"
            coupa_urls.append(coupa_url)
        
        print(f"üìä Encontrados {len(coupa_urls)} n√∫meros de PO no Excel")
        return coupa_urls
        
    except Exception as e:
        print(f"‚ùå Erro ao ler arquivo Excel: {e}")
        return []


def interactive_configuration():
    """
    Menu interativo de configura√ß√£o do sistema de invent√°rio.
    
    Returns:
        dict: Configura√ß√µes escolhidas pelo usu√°rio
    """
    print(" CONFIGURA√á√ÉO INTERATIVA - SISTEMA DE INVENT√ÅRIO")
    print("=" * 60)
    
    config = {}
    
    # 1. Modo Headless
    print("\nüîç MODO HEADLESS:")
    print("1 - Sim (sem interface gr√°fica)")
    print("2 - N√£o (com interface gr√°fica)")
    choice = input("Escolha (1-2): ").strip()
    config['headless'] = choice == "1"
    
    # 2. Perfil do Edge
    print("\nüë§ PERFIL DO EDGE:")
    print("1 - Perfil tempor√°rio (limpo)")
    print("2 - Perfil m√≠nimo (apenas cookies/logins)")
    print("3 - Perfil completo (extens√µes, hist√≥rico, etc.)")
    choice = input("Escolha (1-3): ").strip()
    
    if choice == "1":
        config['profile_mode'] = "none"
    elif choice == "2":
        config['profile_mode'] = "minimal"
    else:
        config['profile_mode'] = "full"
    
    # 3. N√∫mero de janelas
    print("\nü™ü N√öMERO DE JANELAS:")
    print("1 - 2 janelas (conservador)")
    print("2 - 4 janelas (equilibrado)")
    print("3 - 6 janelas (agressivo)")
    print("4 - Personalizado")
    choice = input("Escolha (1-4): ").strip()
    
    if choice == "1":
        config['num_windows'] = 2
    elif choice == "2":
        config['num_windows'] = 4
    elif choice == "3":
        config['num_windows'] = 6
    else:
        while True:
            try:
                num_windows = int(input("N√∫mero de janelas (1-8): ").strip())
                if 1 <= num_windows <= 8:
                    config['num_windows'] = num_windows
                    break
                else:
                    print("‚ùå Digite um n√∫mero entre 1 e 8")
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido")
    
    # 4. M√°ximo de abas por janela
    print("\nüìë M√ÅXIMO DE ABAS POR JANELA:")
    print("1 - 2 abas (conservador)")
    print("2 - 3 abas (equilibrado)")
    print("3 - 5 abas (agressivo)")
    print("4 - Personalizado")
    choice = input("Escolha (1-4): ").strip()
    
    if choice == "1":
        config['max_tabs_per_window'] = 2
    elif choice == "2":
        config['max_tabs_per_window'] = 3
    elif choice == "3":
        config['max_tabs_per_window'] = 5
    else:
        while True:
            try:
                max_tabs = int(input("M√°ximo de abas por janela (1-10): ").strip())
                if 1 <= max_tabs <= 10:
                    config['max_tabs_per_window'] = max_tabs
                    break
                else:
                    print("‚ùå Digite um n√∫mero entre 1 e 10")
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido")
    
    # 5. N√∫mero de linhas para processar
    print("\nüìä PROCESSAMENTO DO EXCEL:")
    print("1 - Processar arquivo completo")
    print("2 - Processar apenas algumas linhas (para teste)")
    choice = input("Escolha (1-2): ").strip()
    
    if choice == "2":
        while True:
            try:
                max_lines = int(input("Quantas linhas deseja processar? (ex: 5): ").strip())
                if max_lines > 0:
                    config['max_lines'] = max_lines
                    break
                else:
                    print("‚ùå Digite um n√∫mero maior que 0")
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido")
    else:
        config['max_lines'] = None
    
    # 6. N√∫mero de workers paralelos
    print("\n‚ö° PARALELISMO:")
    print("1 - 2 workers (conservador)")
    print("2 - 4 workers (equilibrado)")
    print("3 - 6 workers (agressivo)")
    print("4 - Personalizado")
    choice = input("Escolha (1-4): ").strip()
    
    if choice == "1":
        config['max_workers'] = 2
    elif choice == "2":
        config['max_workers'] = 4
    elif choice == "3":
        config['max_workers'] = 6
    else:
        while True:
            try:
                max_workers = int(input("N√∫mero de workers paralelos (1-10): ").strip())
                if 1 <= max_workers <= 10:
                    config['max_workers'] = max_workers
                    break
                else:
                    print("‚ùå Digite um n√∫mero entre 1 e 10")
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido")
    
    # 7. Resumo da configura√ß√£o
    print("\nüìã RESUMO DA CONFIGURA√á√ÉO:")
    print("=" * 30)
    print(f"Headless: {'Sim' if config['headless'] else 'N√£o'}")
    print(f"Perfil: {config['profile_mode']}")
    print(f"Janelas: {config['num_windows']}")
    print(f"M√°x Abas/Janelas: {config['max_tabs_per_window']}")
    max_lines_text = 'Todas' if config['max_lines'] is None else f'{config["max_lines"]} linhas'
    print(f"Linhas Excel: {max_lines_text}")
    print(f"Workers Paralelos: {config['max_workers']}")
    
    confirm = input("\n‚úÖ Confirmar configura√ß√£o? (s/n): ").strip().lower()
    if confirm not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Configura√ß√£o cancelada.")
        return None
    
    return config


def create_windows(driver, num_windows, config):
    """
    Cria m√∫ltiplas janelas posicionadas na tela.
    
    Args:
        driver: Inst√¢ncia do WebDriver
        num_windows: N√∫mero de janelas para criar
        config: Configura√ß√µes do usu√°rio
    
    Returns:
        list: Lista de IDs das janelas criadas
    """
    wait = WebDriverWait(driver, 10)
    window_ids = []
    
    # Obter dimens√µes da tela
    screen_width = driver.execute_script("return screen.width")
    screen_height = driver.execute_script("return screen.height")
    
    # Calcular tamanho das janelas baseado no n√∫mero
    if num_windows <= 2:
        window_width = screen_width // 2
        window_height = screen_height // 2
        cols = 2
    elif num_windows <= 4:
        window_width = screen_width // 2
        window_height = screen_height // 2
        cols = 2
    else:
        window_width = screen_width // 3
        window_height = screen_height // 2
        cols = 3
    
    print(f"ü™ü Criando {num_windows} janelas...")
    print(f"   Tamanho: {window_width}x{window_height}")
    print(f"   Layout: {cols} colunas")
    
    for i in range(num_windows):
        # Criar nova janela
        driver.switch_to.new_window('window')
        driver.get("about:blank")
        
        # Aguardar carregamento completo
        wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
        
        # Calcular posi√ß√£o da janela
        row = i // cols
        col = i % cols
        
        x = col * window_width
        y = row * window_height
        
        # Posicionar janela
        driver.set_window_position(x, y)
        driver.set_window_size(window_width, window_height)
        
        window_id = driver.current_window_handle
        window_ids.append(window_id)
        
        print(f"‚úÖ Janela {i+1} criada - ID: {window_id}")
        print(f"   Posi√ß√£o: ({x}, {y})")
        print(f"   Tamanho: {window_width}x{window_height}")
    
    return window_ids


def manage_inventory_system(config):
    """
    Sistema principal de invent√°rio - coleta URLs sem baixar.
    
    Args:
        config (dict): Configura√ß√µes escolhidas pelo usu√°rio
    """
    driver = None
    tab_manager = None
    
    try:
        # Configurar o Edge WebDriver
        options = webdriver.EdgeOptions()
        
        # Set profile options FIRST
        if config['profile_mode'] != "none":
            if os.name != 'nt':  # macOS/Linux
                profile_path = os.path.expanduser("~/Library/Application Support/Microsoft Edge")
            else:  # Windows
                profile_path = os.path.expanduser("%LOCALAPPDATA%/Microsoft/Edge/User Data")
            
            if os.path.exists(profile_path):
                options.add_argument(f"--user-data-dir={profile_path}")
                options.add_argument(f"--profile-directory=Default")
                print(f"‚úÖ Perfil Edge carregado: {profile_path}")
            else:
                print(f"‚ö†Ô∏è Diret√≥rio do perfil n√£o encontrado: {profile_path}")
        
        options.add_experimental_option("detach", True)
        options.add_argument("--start-maximized")
        
        # Browser preferences
        browser_prefs = {
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": False,
        }
        options.add_experimental_option("prefs", browser_prefs)
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option("useAutomationExtension", False)
        
        if config.get('hide_stacktrace', False):
            options.add_argument("--log-level=3")
            options.add_argument("--silent")
            options.add_argument("--disable-logging")
        
        if config['headless']:
            options.add_argument("--headless=new")
            print("üîç Modo headless ativado")
        
        # Inicializar o driver
        try:
            driver = webdriver.Edge(options=options)
            print("‚úÖ Edge WebDriver inicializado com perfil")
        except Exception as e:
            if "user data directory is already in use" in str(e):
                print("‚ö†Ô∏è Profile directory is already in use. Falling back to default browser session.")
                options = webdriver.EdgeOptions()
                options.add_experimental_option("detach", True)
                options.add_argument("--start-maximized")
                options.add_experimental_option("excludeSwitches", ["enable-automation"])
                options.add_experimental_option("useAutomationExtension", False)
                
                if config['headless']:
                    options.add_argument("--headless=new")
                
                driver = webdriver.Edge(options=options)
                print("‚úÖ Using Edge WebDriver without profile")
            else:
                raise
        
        # Carregar p√°gina inicial
        driver.get("about:blank")
        wait = WebDriverWait(driver, 10)
        wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
        print("‚úÖ Janela inicial carregada")
        
        # ============================================================================
        # üõ°Ô∏è CHAMADA DA FUN√á√ÉO CR√çTICA - N√ÉO ALTERAR SEM AUTORIZA√á√ÉO EXPL√çCITA üõ°Ô∏è
        # ============================================================================
        verify_edge_profile_login_status(driver)
        # ============================================================================
        # üõ°Ô∏è FIM DA CHAMADA CR√çTICA üõ°Ô∏è
        # ============================================================================
        
        # Criar m√∫ltiplas janelas
        window_ids = create_windows(driver, config['num_windows'], config)
        
        # Fechar janela inicial
        driver.switch_to.window(driver.window_handles[0])
        driver.close()
        print("‚úÖ Janela inicial fechada")
        
        # Ler Excel e processar URLs
        coupa_urls = read_po_numbers_from_excel(config.get('max_lines'))
        
        if coupa_urls:
            # Inicializar gerenciador FIFO
            tab_manager = FIFOTabManager(driver, window_ids, config['max_tabs_per_window'])
            
            print(f"\nüöÄ Iniciando sistema de invent√°rio...")
            print(f"üìä Processando {len(coupa_urls)} URLs")
            print(f"ü™ü {config['num_windows']} janelas com m√°ximo {config['max_tabs_per_window']} abas cada")
            print(f"‚ö° {config['max_workers']} workers paralelos")
            
            # Processar URLs em paralelo
            processed_urls = 0
            total_attachments = 0
            
            with ThreadPoolExecutor(max_workers=config['max_workers']) as executor:
                # Submeter todas as tarefas
                future_to_url = {
                    executor.submit(tab_manager.process_url_with_inventory, i, url, config['max_workers']): (i, url)
                    for i, url in enumerate(coupa_urls)
                }
                
                # Processar resultados
                for future in as_completed(future_to_url):
                    i, url = future_to_url[future]
                    try:
                        result = future.result()
                        
                        if result['success']:
                            processed_urls += 1
                            total_attachments += result['attachments_found']
                            po_number = url.split('/')[-1]
                            print(f"‚úÖ [{result['thread_name']}] PO {po_number}: {result['attachments_found']} anexos inventariados")
                        else:
                            print(f"‚ùå [{result['thread_name']}] Erro em URL {i+1}: {result['error']}")
                        
                        # Mostrar progresso
                        progress = (processed_urls / len(coupa_urls)) * 100
                        print(f"üìä Progresso: {processed_urls}/{len(coupa_urls)} ({progress:.1f}%)")
                        
                    except Exception as e:
                        print(f"‚ùå Exce√ß√£o para URL {i+1}: {e}")
            
            # Resumo final
            print(f"\nüéâ Sistema de invent√°rio conclu√≠do!")
            print(f"üìä URLs processadas: {processed_urls}/{len(coupa_urls)}")
            print(f"üìé Total de anexos inventariados: {total_attachments}")
            print(f"üìÑ Arquivo CSV criado: download_inventory.csv")
            print(f"\nüí° Pr√≥ximo passo: Execute o microservi√ßo de download para baixar os arquivos!")
            
        else:
            print("‚ö†Ô∏è Nenhuma URL encontrada no Excel.")
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de invent√°rio: {e}")
        
    finally:
        if driver:
            try:
                driver.quit()
                print("üîí WebDriver fechado com sucesso!")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao fechar WebDriver: {e}")


if __name__ == "__main__":
    print("üöÄ Iniciando Sistema de Invent√°rio de Downloads...")
    
    # Configura√ß√£o interativa
    config = interactive_configuration()
    if config is None:
        print("üëã Programa finalizado!")
        sys.exit(0)
    
    # Executar sistema de invent√°rio
    manage_inventory_system(config)
    print("üëã Programa finalizado!")


