#!/usr/bin/env python3
"""
Teste de observabilidade do estado atual da implementa√ß√£o.
Verifica se os m√≥dulos e servi√ßos implementados est√£o funcionais.
"""

import sys
import traceback
from pathlib import Path

# Adicionar src ao path
src_path = Path(__file__).parent
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

def test_models_import():
    """Testa se os modelos podem ser importados."""
    print("üîç Testando importa√ß√£o dos modelos...")
    try:
        from models import (
            Worker, WorkerStatus, WorkerConfiguration,
            Profile, ProfileStatus,
            Tab, TabStatus,
            BrowserSession, SessionStatus,
            POTask
        )
        print("‚úÖ Modelos importados com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao importar modelos: {e}")
        traceback.print_exc()
        return False

def test_services_import():
    """Testa se os servi√ßos podem ser importados."""
    print("\nüîç Testando importa√ß√£o dos servi√ßos...")
    try:
        from src.services import (
            ProfileManager,
            MemoryMonitor,
            TaskQueue,
            SignalHandler,
            GracefulShutdown,
            WorkerManager
        )
        print("‚úÖ Servi√ßos importados com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao importar servi√ßos: {e}")
        traceback.print_exc()
        return False

def test_models_instantiation():
    """Testa se os modelos podem ser instanciados."""
    print("\nüîç Testando instancia√ß√£o dos modelos...")
    try:
        from models import Worker, Profile, Tab, BrowserSession, POTask, WorkerConfiguration
        import tempfile
        
        # Criar inst√¢ncias b√°sicas
        config = WorkerConfiguration(worker_id="test-worker-1")
        worker = Worker(worker_id="test-worker-1", configuration=config)
        
        with tempfile.TemporaryDirectory() as temp_dir:
            profile = Profile(profile_id="test-profile", base_path=temp_dir)
            
        tab = Tab(tab_id="test-tab", session_id="test-session")
        session = BrowserSession(session_id="test-session", profile=profile)
        task = POTask(task_id="test-task", po_number="PO123456")
        
        print("‚úÖ Modelos instanciados com sucesso")
        print(f"   Worker: {worker.worker_id} (status: {worker.status})")
        print(f"   Profile: {profile.profile_id} (status: {profile.status})")
        print(f"   Tab: {tab.tab_id} (status: {tab.status})")
        print(f"   Session: {session.session_id}")
        print(f"   Task: {task.task_id}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao instanciar modelos: {e}")
        traceback.print_exc()
        return False

def test_services_instantiation():
    """Testa se os servi√ßos podem ser instanciados."""
    print("\nüîç Testando instancia√ß√£o dos servi√ßos...")
    try:
        from src.services import ProfileManager, MemoryMonitor, TaskQueue
        import tempfile
        
        # Criar inst√¢ncias b√°sicas
        with tempfile.TemporaryDirectory() as temp_dir:
            profile_manager = ProfileManager(base_path=temp_dir)
            memory_monitor = MemoryMonitor()
            task_queue = TaskQueue()
        
        print("‚úÖ Servi√ßos instanciados com sucesso")
        print(f"   ProfileManager: max_profiles={profile_manager.max_profiles}")
        print(f"   MemoryMonitor: threshold={memory_monitor.memory_threshold}")
        print(f"   TaskQueue: inicializada")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao instanciar servi√ßos: {e}")
        traceback.print_exc()
        return False

def test_basic_functionality():
    """Testa funcionalidades b√°sicas dos servi√ßos."""
    print("\nüîç Testando funcionalidades b√°sicas...")
    try:
        from src.services import ProfileManager, TaskQueue
        from models import POTask
        import tempfile
        
        # Teste ProfileManager
        with tempfile.TemporaryDirectory() as temp_dir:
            profile_manager = ProfileManager(base_path=temp_dir)
            available_profile = profile_manager.get_available_profile()
            print(f"   Perfil dispon√≠vel: {available_profile is not None}")
        
        # Teste TaskQueue
        task_queue = TaskQueue()
        test_task = POTask(task_id="test-basic", po_number="PO-BASIC-123")
        task_queue.add_task(test_task)
        
        status = task_queue.get_status()
        print(f"   Status da fila: {status.get('total_tasks', 0)} tarefas")
        
        # Tentar obter pr√≥xima tarefa
        next_task = task_queue.get_next_task(worker_id="test-worker")
        print(f"   Pr√≥xima tarefa: {next_task.task_id if next_task else 'None'}")
        
        print("‚úÖ Funcionalidades b√°sicas testadas com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao testar funcionalidades: {e}")
        traceback.print_exc()
        return False

def test_memory_monitoring():
    """Testa o monitoramento de mem√≥ria."""
    print("\nüîç Testando monitoramento de mem√≥ria...")
    try:
        from src.services import MemoryMonitor
        
        memory_monitor = MemoryMonitor()
        system_info = memory_monitor.get_system_memory_info()
        status = memory_monitor.get_status()
        
        print(f"   Uso atual de mem√≥ria: {system_info.get('usage_percent', 0):.1f}%")
        print(f"   Threshold configurado: {memory_monitor.memory_threshold}")
        print(f"   Monitoring ativo: {status.get('monitoring_active', False)}")
        
        print("‚úÖ Monitoramento de mem√≥ria testado com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao testar monitoramento de mem√≥ria: {e}")
        traceback.print_exc()
        return False

def main():
    """Executa todos os testes de observabilidade."""
    print("üöÄ Iniciando testes de observabilidade da implementa√ß√£o atual\n")
    
    tests = [
        ("Importa√ß√£o de Modelos", test_models_import),
        ("Importa√ß√£o de Servi√ßos", test_services_import),
        ("Instancia√ß√£o de Modelos", test_models_instantiation),
        ("Instancia√ß√£o de Servi√ßos", test_services_instantiation),
        ("Funcionalidades B√°sicas", test_basic_functionality),
        ("Monitoramento de Mem√≥ria", test_memory_monitoring),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Falha cr√≠tica no teste '{test_name}': {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "="*60)
    print("üìä RESUMO DOS TESTES DE OBSERVABILIDADE")
    print("="*60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES PASSARAM! A implementa√ß√£o est√° funcional e observ√°vel.")
        print("\nüìã Pr√≥ximos passos sugeridos:")
        print("   1. Executar testes de integra√ß√£o: pytest tests/integration/")
        print("   2. Implementar Phase 3.5: Integration & Coordination")
        print("   3. Criar testes end-to-end com worker pool completo")
    elif passed > total // 2:
        print(f"\n‚ö†Ô∏è  IMPLEMENTA√á√ÉO PARCIALMENTE FUNCIONAL ({passed}/{total} testes passaram)")
        print("   A base est√° s√≥lida, mas alguns componentes precisam de ajustes.")
    else:
        print(f"\nüö® IMPLEMENTA√á√ÉO COM PROBLEMAS CR√çTICOS ({passed}/{total} testes passaram)")
        print("   Necess√°rio revisar e corrigir os componentes b√°sicos.")

if __name__ == "__main__":
    main()